#
|c|C|
|std_lib|stdlib.h|
|EXIT_SUCCESS|EXIT_FAILURE|
|exit|return|
  macros used in main() when returning to indicate
  if program ran successfully or not
  ~ macros not necessarily these values
$GREEN$macros$$:
EXIT_SUCCESS: 0
EXIT_FAILURE: 1

?< https://en.cppreference.com/w/c/program/EXIT_status >?
#

#
|c|C|
|malloc|
|allocate|memory|dynamic-memory|stdlib|stdlib.h|
void* malloc(size_t size)   
    allocate the specified amount of memory.
    ! needs to be freed using [free]
    ! size is in bytes
    ! returns NULL on fail
    ~ included in <stdlib.h>
    example: 
      // array now has space for 10 int's
      int* array = malloc(10 * sizeof(int));

?< https://www.tutorialspoint.com/c_standard_library/c_function_malloc.htm >?
#
|c|C|
|calloc|
|allocate|memory|dynamic-memory|stdlib|stdlib.h|
void* calloc(size_t items, size_t size)   
    allocate the specified amount of memory.
    sets memory to 0.
    ! needs to be freed using [free]
    ! returns NULL on fail
    ~ included in <stdlib.h>
    example: 
      // array now has space for 10 int's
      int* array = calloc(10, sizeof(int));

?< https://www.tutorialspoint.com/c_standard_library/c_function_calloc.html >?
#
|c|C|
|realloc|
|reallocate|allocate|memory|dynamic-memory|stdlib|stdlib.h|
void* realloc(void* ptr, size_t size)   
    allocate the specified amount of memory.
    if ptr already allocated, allocates
    the requested amount of memeory and moves data
    ! needs to be freed using [free]
    ! returns NULL on fail
    ~ included in <stdlib.h>
    example: 
      // array now has space for 10 int's
      int* array = realloc(array, 10 * sizeof(int));
      // array now has space for 20 int's
      array = realloc(array, 20 * sizeof(int));

?< https://www.tutorialspoint.com/c_standard_library/c_function_realloc.htm >?
#
|c|C|
|free|
|deallocate|memory|dynamic-memory|stdlib|stdlib.h|
void free(void* mem)   
    free a previously allocated bit of memory
    ! mem may not be NULL
    ! after freeing mem isn't NULL
    ~ included in <stdlib.h>
    example: 
      int* array = malloc(10 * sizeof(int));
      free(array);

?< https://www.tutorialspoint.com/c_standard_library/c_function_free.htm >?
#
|c|C|
|atof|
|convert|stdlib|stdlib.h|
double atof(const char* str)   
    convert string to double
    ! returns 0.0 if invalid str
    ~ included in <stdlib.h>
    example: 
      double d = atof("123.456");

?< https://www.tutorialspoint.com/c_standard_library/c_function_atof.htm >?
#
|c|C|
|atoi|
|convert|stdlib|stdlib.h|
int atoi(const char* str)   
    convert string to int
    ! returns 0 if invalid str
    ~ included in <stdlib.h>
    example: 
      int d = atoi("123");

?< https://www.tutorialspoint.com/c_standard_library/c_function_atoi.htm >?
#
|c|C|
|atol|
|convert|stdlib|stdlib.h|
long int atol(const char* str)   
    convert string to long int
    ! returns 0 if invalid str
    ~ included in <stdlib.h>
    example: 
      long int d = atol("123456");

?< https://www.tutorialspoint.com/c_standard_library/c_function_atol.htm >?
#
|c|C|
|strtod|
|convert|stdlib|stdlib.h|
double strtod(const char* str, char** endptr)   
    convert string to double
    endptr will be set to the next char after num
    ! returns 0.0 if invalid str
    ~ endptr can be set to NULL
    ~ included in <stdlib.h>
    example: 
      double d = strtod("123.456", NULL);

?< https://www.tutorialspoint.com/c_standard_library/c_function_strtod.htm >?
#
|c|C|
|strtol|
|convert|stdlib|stdlib.h|
long int strtol(const char* str, char** endptri, int base)   
    convert string to long int
    endptr will be set to the next char after num
    base is base 2 / 8/ 10 / 16/ etc.
    ! base has to be between 2 - 36
    ! returns 0 if invalid str
    ~ endptr can be set to NULL
    ~ included in <stdlib.h>
    example: 
      long int d = strtod("123456", NULL, 10);

?< https://www.tutorialspoint.com/c_standard_library/c_function_strtol.htm >?
#
|c|C|
|strtoul|
|convert|stdlib|stdlib.h|
unsigned long int strtoul(const char* str, char** endptr)   
    convert string to unsigned long int
    endptr will be set to the next char after num
    base is base 2 / 8/ 10 / 16/ etc.
    ! base has to be between 2 - 36
    ! returns 0 if invalid str
    ~ endptr can be set to NULL
    example: 
      long int d = strtod("123456", NULL, 10);

?< https://www.tutorialspoint.com/c_standard_library/c_function_strtoul.htm >?
#
|c|C|
|abort|
|exit|quit|stdlib|stdlib.h|
void abort()   
    exits program directly from the place it was called
    ~ included in <stdlib.h>
    example: 
      abort();

?< https://www.tutorialspoint.com/c_standard_library/c_function_abort.htm >?
#
|c|C|
|exit|
|quit|stdlib|stdlib.h|
void exit(int code)   
    exits program directly from the place it was called
    outputs the error code 'code' to the terminal
    ~ code 0 is no error
    ~ code 1 is minor error
    ~ included in <stdlib.h>
    example: 
      exit(1);

?< https://www.geeksforgeeks.org/exit-codes-in-c-c-with-examples/ >?
?< https://www.tutorialspoint.com/c_standard_library/c_function_exit.htm >?
#
|c|C|
|atexit|
|exit|quit|stdlib|stdlib.h|
void atexit(void (*func)(void))   
    registers function pointer to be called right 
    before program termination
    ~ included in <stdlib.h>
    example: 
      void exit_func() { ... }
      atexit(exit_func);

?< https://www.tutorialspoint.com/c_standard_library/c_function_exit.htm >?
#
|c|C|
|system|
|command|command-line|stdlib|stdlib.h|
int exit(const char* command)   
    gives command to the os's terminal
    ! available commands depend on current os
    ~ included in <stdlib.h>
    example: 
      system("dir"); // windows
      system("ls");  // unix

?< https://www.tutorialspoint.com/c_standard_library/c_function_system.htm >?
#









