#
|stb|stb_ds|
  stb_ds has data structure like dynamic arrays and 
  hashmaps for c
  
  see $|$\|stb-array\|$$ and $|$\|stb-hashmap\|$$

  $_$implementation:$$
  define this only once, to define the implementation 
  of the stb_ds functions in that file
  \#define STB_DS_IMPLEMENTATION
  \#include "stb_ds.h"

  $_$more secure hashing:$$
  This flag only needs to be set in the file containing 
  \#define STB_DS_IMPLEMENTATION.
  By default stb_ds.h hashes using a weaker variant of 
  SipHash and a custom hash for
  4- and 8-byte keys. On 64-bit platforms, you can define 
  the above flag to force
  stb_ds.h to use specification-compliant SipHash-2-4 
  for all keys. Doing so makes
  hash table insertion about 20% slower on 4- and 8-byte 
  keys, 5% slower on 64-byte keys, and 10% slower on 
  256-byte keys on my test computer.
  \#define STBDS_SIPHASH_2_4

  $_$long names:$$
  define globally to add stbds_ prefix to functions
  \#define STBDS_NO_SHORT_NAMES
  arrput() -> stbds_arrput()
  
  $_$custom allocator:$$
  \#define STBDS_REALLOC(context,ptr,size) ... 
  \#define STBDS_FREE(context,ptr)         ...
  
  $_$unit tests:$$
  Defines a function stbds_unit_tests() that checks the 
  functioning of the data structures. Note that on older 
  versions of gcc (e.g. 5.x.x) you may need to build with 
  '-std=c++0x' (or equivalentally '-std=c++11') when using 
  anonymous structures as seen on the web
  page or in STBDS_UNIT_TESTS.
  \#define STBDS_UNIT_TESTS

  ?< https://github.com/nothings/stb >?
#
|stb|stb_ds|
|stb-array|array|
|arrfree|arrlen|arrlenu|arrpop|arrput|arrins|arrinsn|
|arraddnptr|arraddnindex|arrdel|arrdeln|arrdelswap|
|arrsetlen|arrsetcap|arrcap|
 
  documentation taken from stb_ds.h directly

  $$$G$T$$: is arbitrary type of array
          int, struct, float, etc.

  $g$T$$* <name> = NULL;
    declare array

  void arrfree($g$T$$*);
    free allocated memory for array,
    needs to be called after creating array
        
  ptrdiff_t arrlen($g$T$$*);
    returns length of array
  
  size_t arrlenu($g$T$$*);
    returns length of array as unsigned integer type
        
  $g$T$$ arrpop($g$T$$* a);
    removes the final element of the array and returns it
        
  $g$T$$ arrput($g$T$$* a, $g$T$$ b);
    appends the item b to the end of array a, returns b
  
  $g$T$$ arrins($g$T$$* a, int p, $g$T$$ b);
    inserts the item b into the middle of array a, into a[p],
    moving the rest of the array over. returns b.

  void arrins($g$T$$* a, int p, int n);
    inserts n uninitialized items into array a starting at a[p],
    moving the rest of the array over.

  $g$T$$* arraddnptr($g$T$$* a, int n)
    appends n uninitialized items onto array at the end.
    returns a pointer to the first uninitialized item added
    ! pointers are only valid until next array change (f.e. arrput)

  size_t arraddnindex($g$T$$* a, int n)
    appends n uninitialized items onto array at the end.
    returns the index of the first uninitialized item added.

  void arrdel($g$T$$* a, int p);
    deletes the element at a[p], moving the rest of the array over.

  void arrdel($g$T$$* a, int p, int n);
    deletes n elements starting at a[p], moving the rest of the array over.

  void arrdelswap($g$T$$* a, int p);
    deletes the element at a[p], replacing it with the element from
    the end of the array. O(1) performance.

  void arrsetlen($g$T$$* a, int n);
    changes the length of the array to n. allocates uninitialized
    slots at the end if necessary.

  size_t arrsetcap($g$T$$* a, int n);
    sets the length of allocated storage to at least n. It will not
    change the length of the array.

  size_t arrcap($g$T$$* a);
    returns the number of total elements the array can contain without
    needing to be reallocated.

  example: 
    int* arr = NULL;
    arrput(arr, 1);
    arrput(arr, 2);
    arrput(arr, 3);
    printf("len: %d\n", arrlen(arr));
    ->len: 3
    
    int i = arrpop(arr);
    printf("len: %d, i: %d\n", arrlen(arr), i);
    ->len: 2, i: 3

    arrins(arr, 1, -1);
    -> arr[0]: 1, arr[1]: -1, arr[2]: 2
    
    arrdel(arr, 1);
    -> arr[0]: 1, arr[1]: 2
    
    arrput(arr, 3);
    arrdelswap(arr, 1, 4);
    -> arr[0]: 1, arr[1]: 2, arr[2]: 4

    arrfree(arr);
#
|stb|stb_ds|
|stb-hashmap|hashmap|
|stbds_rand_seed|stbds_hash_string|stbds_hash_bytes|
|hmfree|shfree|hmlen|shlen|hmlenu|shlenu|
|hmgeti|shgeti|hmgeti_ts|hmget|hmget_ts|shget|
|hmgets|shgets|hmgetp|shgetp|hmgetp_ts|
|hmgetp_null|shgetp_null|hmdefault|shdefault|
|hmdefaults|shdefaults|hmput|shput|hmputs|shputs|
|hmdel|shdel|sh_new_strdup|sh_new_arena|
   
   documentation taken from stb_ds.h directly

  $$$G$T$$: is arbitrary type of hashmap
          int, struct, float, etc. 
  
  void stbds_rand_seed(size_t seed);
    For security against adversarially chosen data, you should seed the
    library with a strong random number. Or at least seed it with time().

  size_t stbds_hash_string(char *str, size_t seed);
    Returns a hash value for a string.

  size_t stbds_hash_bytes(void *p, size_t len, size_t seed);
    These functions hash an arbitrary number of bytes. The function
    uses a custom hash for 4- and 8-byte data, and a weakened version
    of SipHash for everything else. On 64-bit platforms you can get
    specification-compliant SipHash-2-4 on all data by defining
    STBDS_SIPHASH_2_4, at a significant cost in speed.
     
  void hmfree(T*);
  void shfree(T*);
    Frees the hashmap and sets the pointer to NULL.

  ptrdiff_t hmlen(T*)
  ptrdiff_t shlen(T*)
    Returns the number of elements in the hashmap.

  size_t hmlenu(T*)
  size_t shlenu(T*)
    Returns the number of elements in the hashmap.

  ptrdiff_t hmgeti(T*, TK key)
  ptrdiff_t shgeti(T*, char* key)
  ptrdiff_t hmgeti_ts(T*, TK key, ptrdiff_t tempvar)
    Returns the index in the hashmap which has the key 'key', or -1
    if the key is not present.

  TV hmget(T*, TK key)
  TV shget(T*, char* key)
  TV hmget_ts(T*, TK key, ptrdiff_t tempvar)
    Returns the value corresponding to 'key' in the hashmap.
    The structure must have a 'value' field

  T hmgets(T*, TK key)
  T shgets(T*, char* key)
    Returns the structure corresponding to 'key' in the hashmap.

  T* hmgetp(T*, TK key)
  T* shgetp(T*, char* key)
  T* hmgetp_ts(T*, TK key, ptrdiff_t tempvar)
  T* hmgetp_null(T*, TK key)
  T* shgetp_null(T*, char *key)
    Returns a pointer to the structure corresponding to 'key' in
    the hashmap. Functions ending in "_null" return NULL if the key
    is not present in the hashmap; the others return a pointer to a
    structure holding the default value (but not the searched-for key).

  TV hmdefault(T*, TV value)
  TV shdefault(T*, TV value)
    Sets the default value for the hashmap, the value which will be
    returned by hmget/shget if the key is not present.

  TV hmdefaults(T*, T item)
  TV shdefaults(T*, T item)
    Sets the default struct for the hashmap, the contents which will be
    returned by hmgets/shgets if the key is not present.

  TV hmput(T*, TK key, TV value)
  TV shput(T*, char* key, TV value)
    Inserts a <key,value> pair into the hashmap. If the key is already
    present in the hashmap, updates its value.

  T hmputs(T*, T item)
  T shputs(T*, T item)
    Inserts a struct with T.key into the hashmap. If the struct is already
    present in the hashmap, updates it.

  int hmdel(T*, TK key)
  int shdel(T*, char* key)
    If 'key' is in the hashmap, deletes its entry and returns 1.
    Otherwise returns 0.

  void sh_new_strdup(T*);
    Overwrites the existing pointer with a newly allocated
    string hashmap which will automatically allocate and free
    each string key using realloc/free

  void sh_new_arena(T*);
    Overwrites the existing pointer with a newly allocated
    string hashmap which will automatically allocate each string
    key to a string arena. Every string key ever used by this
    hash table remains in the arena until the arena is freed.
    Additionally, any key which is deleted and reinserted will
    be allocated multiple times in the string arena.
#

