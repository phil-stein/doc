
@NOTE: testing ground no actual docs here

#
|custom_sheet|custom_sheets|sheet|sheets|
|doc|docs|doc_help|term_docs|
|-help|-h|
  // @TODO:
#
|doc|
|docs|doc_help|term_docs|
|-help|-h|

documentation:
  enter 'doc [word]' into the terminal to search documentation
  when searching '[word]' is matched against the tags, like the ones above, doc, -help, etc.,
  in the .sheet documentation

definition search:
  enter 'doc [dir] [func_name]' to search all .h files in [dir] for [func_names]'s definition


  doc word word ... -> .sheet docs 

  -f/-function, -s/-struct
  doc -f dir name   -> func definition
  doc -s dir name   -> struct definition
or
  -d/-definition, -s/-search
  doc -d dir name   -> func/struct/enum definition
  doc -s dir name   -> func/struct/enum occurance

incomplete search:
  
  doc start...      -> start, start_01, etc.
or
  -f/-fuzzy
  doc -f start      -> start, start_01, etc.
or
  -f/-fuzzy
  doc -d -f start      -> start();, start_01();, etc.
or
  doc ~start        -> start, start_01, a_start, a_start_01, etc.

#

#
|test|wip|
    ! not actual documentation just a test

    char    character achar
    short   shotest   ashort
    int     integer   aint
    long    longest   along
    float   floating  afloat
    double  doubled   adouble
    unsigned, const, struct, enum, typedef
    func(), func(int a, float b), func(int a), func(int,int b), func ()
    
    // correct
    122 12.2 12.2f 
    122E-1 122e-1 122E-1L 122e-1L
    0x12 0xAF3B 0b0101
    12u 12l 12ul
    // incorrect
    1230x21 0g324 123e 123e- 123-3
    
    'c' '\n' 'u0040' 
    "hello"
    "start""middle""end"
    "line01 \
     line02"
    true, false
    NULL

    if ()       if()
    else if ()  else if()
    else{}      else {} 
    for ()      for()
    while ()    while()
    do{}        do {}
    switch ()   switch()
    
    return; return val; break; continue; case 23: default:
    
    if else for while do switch
    return break continue case default


    // comment
    // comment highlights @DOC: @TODO: @BUGG: @TMP: @OPTIMIZATION:
    /*
     | multi
     | line
     | comment
     | comment highlights @DOC: @TODO: @BUGG: @TMP: @OPTIMIZATION:
    */
    // multiline comment  \
       comment            \
       comment
    not comment
    
    \#if     condition
    \#elif   condition
    \#else
    \#define MACRO
    \#ifdef  MACRO
    \#ifndef MACRO
    \\# escaped hashtag   
    \#multiline preprocessor  \
     still preprocessor      \
     still preprocessor      \
     still preprocessor      
    no longer preprocessor
    
    ~ info
    ~ info ~ not info
    \~ not an info
    ! warning
    ! warning ! not warning   \!!!
    \! not a warning
    ? link
    ? link ? not link
    \? not a link
    \| not a tag
   
    ~ info with escaped \! \? \~ \| \\#
    ! warn with escaped \! \? \~ \| \\#
    \# prepr. with escaped \! \? \~ \| \\#
    // comment with escaped \! \? \~ \| \\#
    /* comment with escaped \! \? \~ \| \\# */

    example:

    changing $red$color$$ hello
    $black$black$$ <- black text
    $red$red$$
    $green$green$$
    $yellow$yellow$$
    $blue$blue$$
    $purple$purple$$
    $cyan$cyan$$
    $red$red $green$green $yellow$yellow $blue$blue $purple$purple $cyan$cyan $$
    $RED$red $GREEN$green $YELLOW$yellow $BLUE$blue $PURPLE$purple $CYAN$cyan $$
    $r$red $g$green $y$yellow $b$blue $p$purple $c$cyan $$
    $R$red $G$green $Y$yellow $B$blue $P$purple $C$cyan $$
    
    changing $italic$mode italic $red$color$white$ hello $$ normal
    $dim$mode dim,$$ $italic$$dim$ italic dim$$
    $underline$underline$$ normal
    $/$italic$$ normal $_$underline$$ normal $%$dim$$ \? $$

    $~$set info style$$ normal again
    $!$set warn style$$ normal again
    $?$set link style$$ normal again
    $|$set tag style$$ normal again
    $|$not_tag$|$ $$ $not_tag$ finds this
    
    ~ info, $cyan$cyan$$ info ~ not info
    ~ info, $cyan$cyan$$ info 
    normal text
    ! warn, $cyan$cyan$$ warn ! not warn
    ! warn, $cyan$cyan$$ warn 
    normal text

    c-highlighting:
      int var = func(float f);  // active
      if (var == f) { struct }
      else { func(); }
      $syn$
      int var = func(float f);  // inactive
      if (var == f) { struct }
      else { func(); }
      $$
      int var = func(float f);  // active
      if (var == f) { struct }
      else { func(); }

    \#define MACRO 10
    \#define MACRO "string"

#
