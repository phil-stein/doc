
modifiers:

#
|unsigned|type|signed|signdness|
    unsigned integer type variables can hold numbers 2x as big 
    as their signed equivalent, but can't hold negative numbers
    ! unsigned number going negative causes overflow
    example: 
      unsigned long long = 10;
      unsigned int       = 10;
      unsigned short     = 10;
      unsigned char      = 10;

      unsigned = 10;  // same as unsigned int 
#
|const|type|constant|
    variables marked const cant be modified during runtime
    can be applied to all types and structs
    ~ using const vars can speed up the program
    ~ using const can also prevent you from 
    ~ accidentally changing a value you shouln't
    example:
      const int c = 10;
      int a = c * 2;    // legal
      c = a * 2;        // illegal
#

data structures:

#
|array|data|type|
    arrays hold multiple variables 
    of the same type in direct succesion in memory
    arrays can be formed out of all variable types and structs
    ~ syntax: type var_name[]
    ~ first element in an array has index 0: array[0]
    example:
      int a[10];  // array of size 10 with undefined content
      int b[] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 }
      printf("%d", b[3]); // access third element in b
        -> 3
#
|struct|structure|data|type|
    structs hold variables like an [array], but
    they can hold different types
    ~ [typedef]
    example:
      // definition
      struct data_t { int a; float b; }
      struct data_t var = { .a = 10, .b = 0.1f };
      int a = var.a;      // access variable in struct
      struct data_t* ptr = &var;
      float b = ptr->b;   // access variable in struct-pointer
#
|typedef|typedef|syntax|
    add a second name for a symbol
    example:
      // types
      typedef unsigned char u8;
      u8 a = 10;
      // enums
      enum a { A };
      typedef enum { A }b;

      enum a var_a = A;
      b      var_b = A;
      // structs
      struct a { int a; };
      typedef struct { int a; }b;

      struct a var_a = { .a = 0 };
      b        var_t = { .a = 0 };
#

actual types:

#
|void|type|
    used in functions with no return
    void* can point to anything
    ! void* doesn't give any information
    ! about the size/type of the value
    example: 
      void  func() {}
      void* ptr = &var;
#
|bool|boolean|type|
    either true or false
    true: 1, false: 0
    8 bit wide
    ! size of types varies, use sizeof() to test
    ! not included in all versions of c
    ~ include "stdbool.h"
    ~ or [define]/[typedef] bool, true, false
    example:
      bool a = true;
      a = false;
      a = 1;
      a = 0;
      if (a)  {...}
      if (!a) {...} // true->false, false->true
#
|char|type|
    char is a whole number
    signed by default
    8 bit wide
    ! size of types varies, use sizeof() to test
    ~ can use [unsigned] modifier
    example: 
      char  func() {}
      char  val = 10;
      char  val = 'A';
      char* ptr = &val;
#
|short|type|
    short is a whole number
    signed by default
    16 bit wide
    ! size of types varies, use sizeof() to test
    ~ can use [unsigned] modifier
    example: 
      short  func() {}
      short  val = 10;
      short* ptr = &val;
#
|int|type|
    int is a whole number
    signed by default
    abrev. for integer 
    32 bit wide
    ! size of types varies, use sizeof() to test
    ~ can use [unsigned] modifier
    example: 
      int  func() {}
      int  val = 10;
      int* ptr = &val;
#
|long|type|
    long is a whole number
    signed by default
    abrev. for integer 
    32 bit wide
    same as [int]
    ! size of types varies, use sizeof() to test
    ~ can use [unsigned] modifier
    example: 
      long  func() {}
      long  val = 10;
      long* ptr = &val;
#
|long-long|long|type|
    long long is a whole number
    signed by default
    abrev. for integer 
    64 bit wide
    ! size of types varies, use sizeof() to test
    ~ can use [unsigned] modifier
    example: 
      long long  func() {}
      long long  val = 10;
      long long* ptr = &val;
#
|float|type|
    float is a decimal number
    32 bit wide
    ! size of types varies, use sizeof() to test
    ~ literals end in 'f': '1.2f'
    example: 
      float  func() {}
      float  val = 12.345f;
      float* ptr = &val;
#
#
|double|type|
    double is a decimal number
    64 bit wide
    ! size of types varies, use sizeof() to test
    ~ unlike [float] literals dont end in 'f'
    example: 
      double  func() {}
      double  val = 12.345;
      double* ptr = &val;
#

@TODO: size_t, uint_8, etc..., but maybe add them in the sheet for the header that defines them ?

macros:

#
|define|macro|
    the define macro registeres a piece of code under a name
    \~ use '\' to make multiline macros, no whitespace after '\'
    ~ wrapping args in parenthesis makes it safer 
    \! hello
    ! hi
    example:
      \#define NAME 34 * 67
      \#define ADD(a, b) ((a) + (b))
      \#define WARNING()      \
        printf("[!!!]");      \
        printf(" warning\n")

      printf("%d\n", NAME);
      printf("%d\n", ADD(30, 70));
      WARNING();
        -> 2278 
        -> 100
        -> "[!!!] warning"
#
@TODO: if, idef, else, ifndef, elif, etc.
#
|c-version|c|version|c89|c99|c11|c18|compiler|macro|
    c was originally made in 1972 by Dennis Ritchie, 
    so theres been a lot of versions since then
    if you want to check which version you are
    currently compiling in use the macros shown below

    setting a specific c version to use 
    depends on the compiler see below

    example:
      // print version
      if (__STDC_VERSION__ >=  201710L)       
      { printf("-- using c18 --\n"); }            
      else if (__STDC_VERSION__ >= 201112L)   
      { printf("-- using c11 --\n"); }            
      else if (__STDC_VERSION__ >= 199901L)   
      { printf("-- using c99 --\n"); }            
      else                                    
      { printf("-- using c89/c90 --\n"); }
      
      // set version in compiler
      // in makefile / directly in terminal
      
      gcc -std=c90  // c89 / c90
      gcc -std=c99  // c99
      gcc -std=c11  // c11
      gcc -std=c17  // c17 / 18
      // c89 and c90 is the same version
      // in gcc c99 implemnts corrertions of the early 2000s versions
      // in gcc c11 and c17 only differ in the value '__STDC_VERSION__'

      clang -std=c89 -std=c90   // c89 / c90
      clang -std=gnu89          // c89 with gnu extensins
      clang -std=c99
      clang -std=gnu99          // c99 with gnu extensins
      clang -std=c11
      clang -std=gnu11          // c11 with gnu extensins
      clang -std=c17
      clang -std=gnu17          // c17 with gnu extensins

      // msvc is a windows specific compiler made by
      // microsoft for Visial Studio, etc.
      // could not find older versions supported by msvc
      // use '/' or '-' to start a command  
      msvc /std:c11 -std:c11
      msvc /std:c17 -std:c17

      ?< gcc: https://gcc.gnu.org/onlinedocs/gcc/Standards.html >?
      ?< clang: https://clang.llvm.org/docs/CommandGuide/clang.html >?
      ?< msvc: https://docs.microsoft.com/en-us/cpp/build/reference/compiler-options-listed-by-category?view=msvc-170 >?
      ?<c: https://en.wikipedia.org/wiki/C_(programming_language) >?
           
#



