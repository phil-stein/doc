
#
|term_docs|
|doc|docs|doc_help|
|help|h|-help|-h|--help|--h|
|-c|-color|config|-d|
|-loc|loc|location|
  $_$modifiers:$$
    -color:
    -c:      disable syntax $syn$highlighting ($_$color$$)
    -d:      search for $_$defenition$$ of func in .h file
    -config: print config file
    -loc:    print documentation location
    doc <...> -c
    doc <...> -d
    doc <...> -c -d
    doc -d <...>
    doc <...> -d <...>

  $_$search for documentation:$$
    tag: $|$\|<tag>\|$$
    doc <tag>
    doc <tag1> <tag2> ...
  
  $_$search for definition:$$
    doc <dir> <func-name> -d
    doc - <dir> <func-name>

  $_$custom documentation:$$
    see $|$\|custom-docs\|$$

  $_$custom name:$$
    see $|$\|custom-name\|$$

  $_$config file:$
    view $|$\|config-file\|$$
    doc -config to print config file

  example:
    >doc malloc
      -> $p$stdlib.sheet\|malloc -------------------------------$$
      -> 
      -> $|$\|malloc\|$$
      -> $|$\|allocate\|memory\|dynamic memory\|$$
      -> void* malloc(size_t size)
      ->     allocate the specified amount of memory.
      ->     ! needs to be freed using [free]
      ->     ! size is in bytes
      ->     ! returns NULL on fail
      ->     ~ included in <stdlib.h>
      ->     example:
      ->       // array now has space for 10 int's
      ->       int* array = malloc(10 * sizeof(int));
      -> 
      -> ?< https://www.tutorialspoint.com/c_standard_library/c_function_malloc.htm >
      -> $p$--------------------------------------------------$$
    
    $_$location:$$
    >doc malloc -loc
      -> ->location:
      ->  -> file: <path>\<sheet-name>.sheet
      ->  -> line: <line-nr>
      -> ...
    
    $_$look for section with both git and log as tags$$
    $syn$$_$otherwise (>doc log) would also find math.h log()$$
    >doc git log
      -> ...
    
    >doc ../src function -d
      -> $p$function -----------------------------$$
      -> 
      -> // comment
      -> void function(int arg);
      ->   -> file: 'src/file0.h' line: 34
      ->   
      -> void function(char arg);
      ->   -> file: 'src/file1.h' line: 92
      -> 
      -> $p$--------------------------------------$$

  ?< https://github.com/phil-stein/term_docs/tree/main >?
#
|term_docs|
|custom-sheet|custom-sheets|sheet|sheets|
|custom-docs|custom-doc|custom|
  documentation is stored in the .sheet files in the sheet folder
  int the term_docs root folder
  inside the .sheet files there are several 'sections' that contain
  the $|$\|tags\|$$, that doc searches for
  term_docs uses a custom markup language, as well as highlighting c code
  ~ view $|$\|sheet-syntax-examples\|$$ for more examples
  ~ files need to have .sheet extension, but can have any name

  $_$sections:$$
    '\\#' starts and ends a section inside a .sheet file
    sections can each have a start and end \\# or use the 
    last sections end \\# as their start \\#
    \\#
    section 01
    \\#
    \\#
    section 02
    \\#
    section 03
    \\#
  
  $_$basics:$$
    \\#
    $|$\|tag01\|tag02\|$$
    $|$\|tag03\|$$
    write text here
    int main() // gets highlighted
    ~ this is a hint
    ! this is a warning
    ? this is a link
    
    example: <- gets highighted
    \\#
  
  $_$text style:$$
    style operations are put inside $ symbols
    and reset by a double $
    character are escaped using a \ symbol
    view $|$\|sheet-syntax-examples\|$$ using
    >doc sheet-syntax-examples
    >doc sheet-syntax-examples -c
    to see with and without highlighting
    to see the unformatted text view "sheets/term_docs.sheet"

    ~ escaping \\# using one \ highlights it as a c macro
    $~$  use \\ to scape it fully$$
    $~$  use \ to escape \\# inside of tags$$

  $_$config file:$$
    view $|$\|config-file\|$$
  
  ?< https://github.com/phil-stein/term_docs/tree/main >?
#
|term_docs|
|config|config-file|confic.doc|
|syntax|sheet_dir|sheet_dir_rel|
|[syntax]|[sheet_dir]|[sheet_dir_rel]|

  config file is "root/config.doc"
 
  [syntax]: 
    enables or disables highlighting 
    can be set to 1, true, 0, false
    true by default
  [sheet_dir] and [sheet_dir_rel]: 
    add a new path to check for .sheet files
    [sheet_dir_rel] is relative to root dir
    max is 8 right now

  doc -config to print config file
  
  ~ all paths use '/' instead of '\' for 
  $~$  compatibility with linux$$

  example:
    $_$in config.doc:$$
    [syntax] true
    [syntax] false
    
    [builtin_sheets] false
    [builtin_sheets] true
   
    // builtin sheets
    [sheet_dir_rel] sheets/builtin_sheets/ 
    
    // custom sheets
    [sheet_dir_rel] src/sheets 
    [sheet_dir] C:\custom_sheets

    $_$in terminal:$$
    >doc -config
    -> $p$config.doc --------------------------------------$$
    ->
    -> [syntax] false
    -> [syntax] true
    ->
    -> // builtin sheets
    -> [sheet_dir_rel] sheets/builtin_sheets/ 
    ->
    -> // custom sheets
    -> [sheet_dir_rel] src/sheets
    -> [sheet_dir] C:\custom_sheets
    ->
    -> $dim$-------------------------------------------------$$
    -> $C$config path$$: C:/Workspace/C/term_docs/config.doc
    -> $C$syntax$$: true
    -> $r$max sheet paths$$: 8
    -> $C$path[0]$$: C:/<path-to-root>/sheets/builtin_sheets/
    -> $C$path[1]$$: C:/<path-to-root>/src/sheets/
    -> $C$path[2]$$: C:/custom_sheets/
    -> $p$-------------------------------------------------$$

  ?< https://github.com/phil-stein/term_docs/tree/main >?
#
|term_docs|
|test|wip|
|sheet-syntax-examples|
    ! not actual documentation just a test

    char    character achar
    short   shotest   ashort
    int     integer   aint
    long    longest   along
    float   floating  afloat
    double  doubled   adouble
    unsigned, const, struct, enum, typedef, signed,
    auto, register, static, volatile, extern, restrict  
    func(), func(int a, float b), func(int a), func(int,int b), func ()
    
    // correct
    122 12.2 12.2f 
    122E-1 122e-1 122E-1L 122e-1L
    0x12 0xAF3B 0b0101
    12u 12l 12ul
    // incorrect
    1230x21 0g324 123e 123e- 123-3
    
    'c' '\n' 'u0040' 
    "hello"
    "start""middle""end"
    "line01 \
     line02"
    true, false
    NULL

    if ()       if()
    else if ()  else if()
    else{}      else {} 
    for ()      for()
    while ()    while()
    do{}        do {}
    switch ()   switch()
    
    return; return val; break; continue; case 23: default:
    default
    return
    returns
    returning
    
    if else for while do switch
    return break continue case default


    // comment
    // comment highlights @DOC: @TODO: @BUGG: @TMP: @OPTIMIZATION:
    not comment
    /*
     | multi
     | line
     | comment
     | comment highlights @DOC: @TODO: @BUGG: @TMP: @OPTIMIZATION:
    */
    not comment
    // multiline comment  \
       comment            \
       comment
    not comment
    
    \#if     condition
    \#elif   condition
    \#else
    \#define MACRO
    \#ifdef  MACRO
    \#ifndef MACRO
    \\# escaped hashtag   
    \#multiline preprocessor  \
     still preprocessor      \
     still preprocessor      \
     still preprocessor      
    no longer preprocessor

    [[attribute]]
    [[attribute(xyz)]]
    [[namespace::attribute]]
    [[namespace::attribute(xyz)]]
    [[attribute(xyz), attribute, namespace::attribute(xyz)]]
    [not attribute]
    [not attribute(xyz)]
    [not namespace::attribute]
    [not namespace::attribute(xyz)]
    [not attribute(xyz), not attribute, not namespace::attribute(xyz)]]
    [[attribute]] not part of attribute 
    not part of attribute
    [[attribute]  not part of attribute 
    not part of attribute
    [[attribute   not part of attribute 
    not part of attribute

    ~ info
    ~ info ~ not info
    \~ not an info
    ! warning
    ! warning ! not warning   \!!!
    \! not a warning
    ? link
    ? link ? not link
    \? not a link
    \| not a tag

    escaped \? in link:
    ?< https://www.geeksforgeeks.org/storage-classes-in-c/\?ref=lbp >?
   
    ~ info with escaped \! \? \~ \| \\#
    ! warn with escaped \! \? \~ \| \\#
    \# prepr. with escaped \! \? \~ \| \\#
    // comment with escaped \! \? \~ \| \\#
    /* comment with escaped \! \? \~ \| \\# */

    example
    example:

    changing $red$color$$ hello
    $black$black$$ <- black text
    $red$red$$
    $green$green$$
    $yellow$yellow$$
    $blue$blue$$
    $purple$purple$$
    $cyan$cyan$$
    $red$red $green$green $yellow$yellow $blue$blue $purple$purple $cyan$cyan $$
    $RED$red $GREEN$green $YELLOW$yellow $BLUE$blue $PURPLE$purple $CYAN$cyan $$
    $r$red $g$green $y$yellow $b$blue $p$purple $c$cyan $$
    $R$red $G$green $Y$yellow $B$blue $P$purple $C$cyan $$
    
    changing $italic$mode italic $red$color$white$ hello $$ normal
    $dim$mode dim,$$ $italic$$dim$ italic dim$$
    $underline$underline$$ normal
    $/$italic$$ normal $_$underline$$ normal $%$dim$$ \? $$

    $~$set info style$$ normal again
    $!$set warn style$$ normal again
    $?$set link style$$ normal again
    $|$set tag style$$ normal again
    $|$not_tag$|$ $$ $not_tag$ finds this
    
    ~ info, $cyan$cyan$$ info ~ not info
    ~ info, $cyan$cyan$$ info 
    normal text
    ! warn, $cyan$cyan$$ warn ! not warn
    ! warn, $cyan$cyan$$ warn 
    normal text

    c-highlighting:
      int var = func(float f);  // active
      if (var == f) { struct }
      else { func(); }
      $syn$
      int var = func(float f);  // inactive
      if (var == f) { struct }
      else { func(); }
      $$
      int var = func(float f);  // active
      if (var == f) { struct }
      else { func(); }

    \#define MACRO 10
    \#define MACRO "string"
    \\#not a macro

  ?< https://github.com/phil-stein/term_docs/tree/main >?
#
|term_docs|
|custom-name|
  1. open "build/make/CMakeLists.txt" change set(NAME "...") 
     at the top
  2. in root
    -> >build_cmake
    -> >build
  
  ?< https://github.com/phil-stein/term_docs/tree/main >?
#
