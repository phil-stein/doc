#
|gcc|GCC|
|compiler|
  gcc or the GNU Compiler Collection includes front ends for 
  C, C++, Objective-C, Fortran, Ada, Go, and D, 
  as well as libraries for these languages
  
  $_$32bit gcc windows compiler:$$
    MinGW: ?< https://sourceforge.net/projects/mingw/ >?

  $_$32/64bit gcc windows compilers:$$
    TDM:     ?< https://sourceforge.net/projects/tdm-gcc/ >?
    MinGW64: ?< https://sourceforge.net/projects/mingw-w64/files/ >?

  $_$setup:$$
    vscode: ?< https://code.visualstudio.com/docs/cpp/config-mingw >?

  $_$compiling$$
    compile source to exec:
    gcc -o <executable_name> <file_01.c> <file_02.c> ...
    compile source to object file:
    gcc -c <file.c> -o <file.o>
    link object files:
    gcc -o <executable_name> <file_01.o> <file_02.o> ...
    ?< https://www.wikihow.com/Compile-a-C-Program-Using-the-GNU-Compiler-(GCC) >?
 
  $_$flags:$$
    see $|$\|compiler-flags\|$$

  
  example:
    $_$compile in one:$$
    >gcc -o app main.c app.c
    ->app.exe

    $_$compile object files an link:$$
    >gcc -c main.c -o main.o
    >gcc -c app.c  -o app.o
    >gcc -o app main.o app.o
    ->app.exe


  ?< https://gcc.gnu.org/ >?
#
|gcc|GCC|
|compiler|flags|compiler-flags|
|-o|-g|-I|-L|-l|
|-O1|-O2|-O3|-Ofast|-std|-std=|
|-S|-V|-D|-fverbose-asm|
|-Wall|-W|-Wextra|Werror|
|-Wfloat-equal|-Wundef|-Wshadow|-Wpointer-arith|
|-Wtype-limits|-Wcast-align|-Wpedantic|-Wcast-qual|
|-Wunreachable-code|-Wconversion|-Wswitch-default|-Wswitch-enum|
|-pedantic-errors|
|assembly|asm|
  $_$compiler flags:$$
    $_$compilation:$$
    -o:                 output name
    -c:                 compile without linking
    -g:                 debug info
    -I:                 include directory
    -L:                 library include dir
    -l:                 link library
    -O1:                optimize code
    -O2:                optimize code
    -O3:                optimize code
    -Ofast:             optimize code heavily, may break
    -std:               set c standard
    -S:                 get assembly code
    -fverbose-asm:      get comments in -S assembly
    -V:                 get verbose output for compilation
    -D:                 define macro globally
    $_$warnings:$$
    -Wall:              print all warnings
    -W/-Wextra:         extra warnings
    -Werror:            convert warnings to errors
    -Wfloat-equal:      earn if checking floats  equal
    -Wundef:            check if undefined macro in \#if
    -Wshadow:           check if variable name declared 
                        in multiple scopes
    -Wpointer-arith:    warn if 
    -Wtype-limits:      warn if comparison always true due
                        to limited type size, unsigned < 0
    -Wcast-align:       casting poiter to different size
                        char* = int*
    -Wcast-qual:        warn if casting pointer type removes
                        type qualifier, int* = const int*
    -Wunreachable-code: warn about code thats never executed
    -Wconversion:       warn about conversion that may loose
                        precisions, float -> int
    -Wswitch-default:   warn if switch doesnt have default case
    -Wswitch-enum:      warn if switch doesnt cover all cases
    -Wpedantic:         warn about anythiong not ISO C
    $_$errors:$$
    -pedantic-errors:   turn -Wpendatic warings to errors

  $_$syntax:$$
    generally compiler flags go at the end
    some need an argument to follow them though
    >gcc ... -g -Wall
    >gcc ... -I vendor -I src

  example:
    $_$get assembly:$$
    >gcc -S main.c > main.s
    
    $_$define macro:$$
    defines $p$MACRO$$
    >gcc ... -DMACRO
    >gcc ... -DMACRO=1
    >gcc ... -DMACRO=\"string\"
    
    $_$include directory:$$
    >gcc ... -I vendor -I src
    
    $_$link library libname.a:$$
    libname.a becomes name
    >gcc ... -L libs/64bit -l name

  ?< https://gcc.gnu.org/onlinedocs/gcc/Option-Summary.html >?
  ?< https://www.spec.org/hpc2021/flags/gcc.html >?
  ?< https://linuxhandbook.com/gcc-flags/ >?
  ?< https://developers.redhat.com/blog/2018/03/21/compiler-and-linker-flags-gcc >?
  ?< https://stackoverflow.com/questions/3375697/what-are-the-useful-gcc-flags-for-c >?
#
